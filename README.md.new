# [pict-node](https://pict-node.js.org)

![CLI watch mode example](./docs/logo.svg)

### [Documentation](https://pict-node.js.org)

This library is a wrapper around Microsoft's [PICT](https://github.com/microsoft/pict) (Pairwise Independent Combinatorial Testing) tool, designed to work with Node.js for generating combinations of inputs for software testing. PICT is a powerful tool that helps reduce the number of tests needed while still ensuring comprehensive coverage by generating optimized combinations of inputs.

The library boasts excellent **TypeScript** support! ü™Ñ

> Before using this library, it's helpful to read Microsoft's official [PICT documentation](https://github.com/Microsoft/pict/blob/main/doc/pict.md) to learn about the tool and how it works.

## Installation

```sh
npm install --save-dev pict-node
```

## Features

- **Core Library** - TypeScript wrapper for PICT CLI tool
- **Web Interface** - React/TypeScript frontend for interactive test case generation
- **Express Server** - Backend API serving the web interface
- **Test Infrastructure** - Jest, ESLint, Prettier, Husky for quality control
- **Build Pipeline** - Rollup for library bundling

## Overview

Imagine you have a function for creating order that accepts 6 parameters with several possible values for each argument.

| Parameter      | Possible Values                          |
| -------------- | ---------------------------------------- |
| Location       | Poland, Lithuania, Germany, USA          |
| Customer       | Individuals, Companies, Partners         |
| Time           | 05:00, 11:99, 15:00, 21:30, 23:59        |
| Payment System | VISA, MasterCard, PayPal, WebMoney, Qiwi |
| Product        | 1732, 319, 872, 650                      |
| Discount       | true, false                              |

This model has many possible combinations, which means we could have thousands of test cases to write and test. However, it's not practical to test all of them manually and in a reasonable amount of time. Instead, we can generate and test all possible pairs of values to achieve a good level of coverage.

```js
import { pict } from "pict-node";

const model = [
  {
    key: "location",
    values: ["Poland", "Lithuania", "Germany", "USA"],
  },
  {
    key: "customer",
    values: ["Individuals", "Companies", "Partners"],
  },
  {
    key: "time",
    values: ["05:00", "11:99", "15:00", "21:30", "23:59"],
  },
  {
    key: "paymentSystem",
    values: ["VISA", "MasterCard", "PayPal", "WebMoney", "Qiwi"],
  },
  {
    key: "product",
    values: [
      {
        id: 1732,
      },
      {
        id: 319,
      },
      {
        id: 872,
      },
      {
        id: 650,
      },
    ],
  },
  {
    key: "discount",
    values: [true, false],
  },
];

const cases = await pict({ model });
```

PICT will generate the following test cases:

```js
[
  // ... ... ...
  {
    location: "Lithuania",
    customer: "Individuals",
    time: "23:59",
    paymentSystem: "Qiwi",
    product: { id: 650 },
    discount: true,
  },
  {
    location: "USA",
    customer: "Partners",
    time: "05:00",
    paymentSystem: "VISA",
    product: { id: 319 },
    discount: false,
  },
  // ... ... ...
  {
    location: "Poland",
    customer: "Companies",
    time: "23:59",
    paymentSystem: "MasterCard",
    product: { id: 1732 },
    discount: true,
  },
  // ... ... ...
];
```

## Web Interface

PICT-Node now includes a web interface for interactive test case generation. This provides a user-friendly way to:

- Define test models through a visual editor
- Generate test cases with a single click
- View and export test cases in various formats
- Load example models to get started quickly

### Using the Web Interface

1. Clone the repository and set up the project:

```sh
git clone https://github.com/yourusername/pict-node.git
cd pict-node
./setup.sh
```

2. Start the web interface:

```sh
# Start both the server and web interface in development mode
npm run dev

# Or start only the server in production mode
npm start
```

3. Open your browser and navigate to `http://localhost:3001`

4. Use the interface to create your test model and generate test cases

### Web Interface Features

- **Interactive Model Editor**: Add parameters and values with a user-friendly interface
- **Real-time Test Case Generation**: Generate test cases with a single click
- **Example Models**: Load pre-defined examples to get started quickly
- **Export Options**: Export test cases as JSON or CSV
- **Responsive Design**: Works on desktop and mobile devices

## Create Test Cases

In most cases, to create test cases, you can use the `pict` function. The main feature of this function is that you can use any data type for the values.

```js
import { pict } from "pict-node";
import { createOrder } from "./src";

// Define test model
const model = [
  {
    key: "country",
    values: ["USA", "Canada", "Germany"],
  },
  {
    key: "age",
    values: [10, 16, 18, 25, 70],
  },
  {
    key: "product",
    values: [{ id: 50 }, { id: 350 }],
  },
];

// Generate test cases
const cases = await pict({ model });

// Iterate test cases
for (const { country, age, product } of cases) {
  // Call a function with the current test case
  const result = createOrder({
    country,
    age,
    product,
  });

  // Verify that the function returns the expected result
  expect(result).toBe("The order has been created");
}
```

By default, `pict-node` generates a pair-wise test suite (all pairs covered), but the order can be set by option `order` to a value larger than two.

```js
const cases = await pict(
  {
    model,
  },
  {
    order: 3,
  }
);
```

## TypeScript ü™Ñ

The library provides excellent support for TypeScript.

Here is an example of using this tool with TypeScript:

```ts
import { pict, alias, weight } from "pict-node";

const model = [
  {
    key: "amount",
    //                           ‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì
    values: [1, alias([2, "two"] as const), 3],
  },
  {
    key: "fruit",
    //                       ‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì
    values: [weight("Banana" as const, 10), "Orange", "Apple"],
  },
  // ‚Üì‚Üì‚Üì‚Üì‚Üì
] as const;

const cases = await pict({ model });
```

The type of `cases` will be:

```ts
Array<{
  amount: 1 | 2 | "two" | 3;
  fruit: "Banana" | "Orange" | "Apple";
}>;
```

> ‚ö†Ô∏è Note that we use `as const` to get a literal types!**

Without `as const` the type of `cases` will be:

```ts
Array<{
  amount: number | string;
  fruit: string;
}>;
```

## API Reference

### Core Library

#### `pict(options, config?)`

Generates test cases based on the provided model.

```js
import { pict } from "pict-node";

const cases = await pict({
  model: [
    {
      key: "parameter1",
      values: ["value1", "value2"],
    },
    {
      key: "parameter2",
      values: [1, 2, 3],
    },
  ],
});
```

#### `strings(options, config?)`

Similar to `pict`, but only accepts string values and provides additional options for constraints.

```js
import { strings } from "pict-node";

const cases = await strings({
  model: [
    {
      key: "type",
      values: ["Primary", "Logical", "Single"],
    },
    {
      key: "size",
      values: ["10", "100", "500", "1000"],
    },
  ],
  constraints: [
    'IF [type] = "Primary" THEN [size] <= 500;',
  ],
});
```

### Web Interface API

The web interface provides a REST API for generating test cases:

#### `POST /api/generate`

Generates test cases based on the provided model.

Request body:
```json
{
  "model": [
    {
      "key": "parameter1",
      "values": ["value1", "value2"]
    },
    {
      "key": "parameter2",
      "values": [1, 2, 3]
    }
  ],
  "options": {
    "order": 2
  }
}
```

Response:
```json
{
  "success": true,
  "cases": [
    {
      "parameter1": "value1",
      "parameter2": 1
    },
    {
      "parameter1": "value1",
      "parameter2": 2
    },
    {
      "parameter1": "value2",
      "parameter2": 3
    }
  ],
  "count": 3
}
```

#### `GET /api/examples`

Returns example models for demonstration.

Response:
```json
{
  "examples": [
    {
      "name": "Simple Order System",
      "model": [
        {
          "key": "location",
          "values": ["Poland", "Lithuania", "Germany", "USA"]
        },
        {
          "key": "customer",
          "values": ["Individuals", "Companies", "Partners"]
        }
      ]
    }
  ]
}
```

## Development

```bash
# Install dependencies
npm install

# Run tests
npm test

# Build the library
npm run build

# Start the development server
npm run dev

# Start the production server
npm start
```

## License

MIT
